const DEGREE = Math.PI / 180;
const MIRROR_WIDTH = 4.06;
const MIRROR_HEIGHT = 4.06;

let RECEIVER_Z = 35.0;    // Will be read from file
let RECEIVER_ANGLE = 27.0; // Will be read from file
let RECEIVER_ANGLE_RAD = RECEIVER_ANGLE * DEGREE;
let V_REC = `0 0 ${RECEIVER_Z}`;

const RECEIVER_RADIUS = 0.865;
const TOWER_SIDE = 4.0;
const rays = -5000000;
let TOWER_HEIGHT = RECEIVER_Z - RECEIVER_RADIUS * Math.cos(RECEIVER_ANGLE_RAD);

const GRID_MARGIN = TOWER_SIDE + 2.5; // meters
let minX = Infinity;
let maxX = -Infinity;
let minY = Infinity;
let maxY = -Infinity;

let nMax = 0;

function createNode(parent, name) {
    const node = parent.createNode(name);
    if (!node) throw new Error(`Failed to create node: ${name}`);
    return node;
}

function insertShape(node, surfaceType, profileType) {
    const shape = node.createShape();
    const surface = shape.insertSurface(surfaceType);
    const profile = shape.insertProfile(profileType);
    return { shape, surface, profile };
}

function applyMaterial(shape, parameters) {
    const materialPart = shape.getPart("material");
    if (!materialPart) return;

    if (parameters.ambientColor) materialPart.setParameter("ambientColor", parameters.ambientColor);
    if (parameters.diffuseColor) materialPart.setParameter("diffuseColor", parameters.diffuseColor);
    if (parameters.specularColor) materialPart.setParameter("specularColor", parameters.specularColor);
    if (parameters.shininess) materialPart.setParameter("shininess", parameters.shininess);
}

function makeHeliostat(parent, name, position, aiming, focus) {
    const PYLON_LENGTH = 2.1;
    const heliostatNode = createNode(parent, name);
    heliostatNode.setParameter("translation", `${position[0]} ${position[1]} 0`);

    const tracker = heliostatNode.createTracker();
    const armature = tracker.insertArmature("two-axes");
	armature.setParameter("primaryShift", `0 0 ${position[2] + PYLON_LENGTH}`);
    armature.setParameter("primaryAxis", "0 0 1");
    armature.setParameter("primaryAngles", "-360 360");
    armature.setParameter("secondaryShift", "0 0 0");
    armature.setParameter("secondaryAxis", "1 0 0");
    armature.setParameter("secondaryAngles", "-90 90");
    armature.setParameter("facetShift", "0 0 0");
    armature.setParameter("facetNormal", "0 0 1");

    tracker.getPart("target").setParameter("aimingPoint", aiming);

    const facetNode = createNode(createNode(createNode(heliostatNode, "primary"), "secondary"), "facet");
    facetNode.setParameter("translation", "0 0 0");

    const facet = insertShape(facetNode, "Parabolic", "Box");
    facet.surface.setParameter("fX", focus);
    facet.surface.setParameter("fY", focus);
    facet.profile.setParameter("uSize", MIRROR_WIDTH);
    facet.profile.setParameter("vSize", MIRROR_HEIGHT);

    const material = facet.shape.insertMaterial("Specular");
    material.setParameter("reflectivity", "1.0");
    material.setParameter("slope", "0.002");

    applyMaterial(facet.shape, {
        ambientColor: "0.65 0.72 0.79",
        diffuseColor: "0.05 0.05 0.05",
        specularColor: "0.3 0.25 0.2",
        shininess: "0.5"
    });

    const pylonNode = createNode(heliostatNode, "pylon");
    pylonNode.setParameter("scale", "0.2 0.2 1");

    const pylon = insertShape(pylonNode, "Cylinder", "Rectangular");
    pylon.profile.setParameter("uMin", 0.0);
    pylon.profile.setParameter("uMax", "360d");
    pylon.profile.setParameter("vMin", 0.0);
    pylon.profile.setParameter("vMax", position[2] + PYLON_LENGTH - 0.2);

    pylon.shape.insertMaterial("Transparent");
    applyMaterial(pylon.shape, {
        ambientColor: "0.5 0.5 0.5",
        diffuseColor: "0.3 0.3 0.3",
        specularColor: "0.2 0.2 0.2",
        shininess: "0.1"
    });
}

function generateHeliostatFieldFromCSV(parent, csvFilePath) {
    const file = new DataObject();
    if (!file.read(csvFilePath)) throw new Error(`Failed to load: ${csvFilePath}`);

    // Parse receiver height and angle from first two comment lines
    const line0 = file.array(0)[0];
    const line1 = file.array(1)[0];

    if (line0.startsWith("# receiver_height:")) {
        RECEIVER_Z = parseFloat(line0.split(":")[1].trim());
    } else {
        throw new Error("Missing '# receiver_height:' line in CSV");
    }

    if (line1.startsWith("# receiver_angle_deg:")) {
        RECEIVER_ANGLE = parseFloat(line1.split(":")[1].trim());
    } else {
        throw new Error("Missing '# receiver_angle_deg:' line in CSV");
    }

    RECEIVER_ANGLE_RAD = RECEIVER_ANGLE * DEGREE;
    TOWER_HEIGHT = RECEIVER_Z - RECEIVER_RADIUS * Math.cos(RECEIVER_ANGLE_RAD);
    V_REC = `0 0 ${RECEIVER_Z}`;

    parent.setName("HeliostatField");
    const nodeHeliostats = createNode(parent, "Heliostats");
    nMax = 0;
    for (let i = 2; i < file.rows(); i++) {
        const row = file.array(i);
        if (row.length < 5) continue;
        const [label, x, y, z, focus] = [row[0], ...row.slice(1).map(parseFloat)];
        if ([x, y, z, focus].some(Number.isNaN)) continue;

        // Update global min/max
        if (x < minX) minX = x;
        if (x > maxX) maxX = x;
        if (y < minY) minY = y;
        if (y > maxY) maxY = y;

        makeHeliostat(nodeHeliostats, label, [x, y, z], V_REC, focus);
        nMax++;
    }

    print(`Heliostat field successfully generated with ${nMax} heliostats.`);
}

function makeReceiverGroup(parent, aiming) {
    parent.setName("ReceiverGroup");
    parent.setParameter("translation", aiming);
    parent.setParameter("rotation", `-1 0 0 ${RECEIVER_ANGLE}`);

    const inputAperture = createNode(parent, "InputAperture");
    inputAperture.setParameter("rotation", "0 0 1 180");

    const apertureX = createNode(inputAperture, "InputApertureRotationX");
    apertureX.setParameter("rotation", "1 0 0 90");

    const { shape, profile } = insertShape(apertureX, "Planar", "Circular");
    profile.setParameter("rMax", `${RECEIVER_RADIUS}`);

    applyMaterial(shape, { ambientColor: "0.9 0.4 0.5" });
}

function makeTower(parent) {
    const yOffset = -(TOWER_SIDE / 2.0 + RECEIVER_RADIUS * Math.sin(RECEIVER_ANGLE_RAD));
    parent.setName("Tower");
    parent.setParameter("translation", `0 ${yOffset} ${TOWER_HEIGHT / 2.0}`);
    parent.setParameter("scale", `${TOWER_SIDE} ${TOWER_SIDE} ${TOWER_HEIGHT}`);
    insertShape(parent, "Cube", "Box");
}

try {
    tn.Clear();

    const field = new NodeObject();
    generateHeliostatFieldFromCSV(field, "../layouts/layout_test.csv");
    tn.InsertScene(field);

    const receiver = new NodeObject();
    makeReceiverGroup(receiver, V_REC);
    tn.InsertScene(receiver);

    const tower = new NodeObject();
    makeTower(tower);
    tn.InsertScene(tower);

    const scene = tn.getScene();
    scene.getPart("world.camera").setParameter("position", "0 0 100");
    scene.getPart("world.camera").setParameter("rotation", "0 -90");
    scene.getPart("world.sun").setParameter("shape", "Buie");

    const sunPos = scene.getPart("world.sun").getPart("position");
    sunPos.setParameter("azimuth", 180);
    sunPos.setParameter("elevation", 67);


	const gridMinX = Math.floor(minX - GRID_MARGIN);
	const gridMaxX = Math.ceil(maxX + GRID_MARGIN);
	const gridMinY = Math.floor(minY - GRID_MARGIN);
	const gridMaxY = Math.ceil(maxY + GRID_MARGIN);

    const grid = scene.getPart("world.terrain").getPart("grid");
	grid.setParameter("min", `${gridMinX} ${gridMinY} 0`);
	grid.setParameter("max", `${gridMaxX} ${gridMaxY} 0`);

    if (rays > 0) {
        const inputFile = new DataObject();
        if (!inputFile.read("../data/directions_with_weights_tarancon_spain.csv")) {
            throw new Error("Missing input file");
        }

        const outputFile = new DataObject();
        const outputPath = "../results/directions_with_weights_and_efficiency_tarancon_spain.csv";

        // Mirror area computation
        const mirrorAreaEach = MIRROR_WIDTH * MIRROR_HEIGHT;
        const mirrorAreaTotal = mirrorAreaEach * nMax;

        // Copy the latitude and DNI header line from the input file
        const latitudeRow = inputFile.array(0);
        const latitudeLine = latitudeRow.join(", ");
        if (latitudeLine.startsWith("# latitude_deg:")) {
            outputFile.addRow(latitudeLine);
        } else {
            throw new Error("Missing or invalid latitude/DNI header in input file.");
        }

        // Write heliostat field parameters
        outputFile.addRow(`# heliostats: ${nMax}, mirror_area_each: ${mirrorAreaEach.toFixed(6)}, mirror_area_total: ${mirrorAreaTotal.toFixed(6)}`);

        // Add data header line
        outputFile.addRow("# azimuth_deg, elevation_deg, weight, efficiency");

        // Prepare ray tracing
        const irradiance = 1000;
        const maxInputPower = mirrorAreaTotal * irradiance;

        // Process sun directions and weights
        for (let i = 0; i < inputFile.rows(); i++) {
            const row = inputFile.array(i);
            if (row.length < 3) continue;

            const azimuth = parseFloat(row[0]);
            const elevation = parseFloat(row[1]);
            const weight = parseFloat(row[2]);
            if ([azimuth, elevation, weight].some(Number.isNaN)) continue;

            sunPos.setParameter("azimuth", azimuth);
            sunPos.setParameter("elevation", elevation);
            sunPos.setParameter("irradiance", irradiance);

            const interceptedPower = tn.FindInterception("//Node/ReceiverGroup/InputAperture/InputApertureRotationX/Shape", rays);
            const eta = interceptedPower / maxInputPower;

            outputFile.addRow(`${azimuth}, ${elevation}, ${weight}, ${eta}`);
        }

        outputFile.write(outputPath);
    }
} catch (error) {
    print(`Simulation error: ${error.message}`);
}